name: Full CI/CD Pipeline

on:
  push:
    branches: [main, dev]
  pull_request:
    branches: [main, dev]

env:
  NODE_VERSION: '18'

jobs:
  # =============================================================================
  # CI/CD PIPELINE - BUILD, TEST, AND DEPLOY
  # =============================================================================
  
  ci-checks:
    name: CI Checks (Lint, Format, Test, Build)
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: |
            project/package-lock.json
            project/server/package-lock.json

      # --- Frontend Setup & Checks ---
      - name: Install frontend dependencies
        run: |
          cd project
          npm ci --prefer-offline --no-audit

      - name: Lint frontend
        run: |
          cd project
          npm run lint

      - name: Format check frontend
        run: |
          cd project
          npm run format -- --check

      - name: Run frontend tests
        run: |
          cd project
          npm test -- --coverage --watchAll=false --passWithNoTests

      - name: Build frontend
        run: |
          cd project
          npm run build

      - name: Security audit frontend
        run: |
          cd project
          npm audit --audit-level=moderate

      # --- Backend Setup & Checks ---
      - name: Install backend dependencies
        run: |
          cd project/server
          npm ci --prefer-offline --no-audit

      - name: Lint backend
        run: |
          cd project/server
          npm run lint || echo "No lint script found, skipping"

      - name: Format check backend
        run: |
          cd project/server
          npm run format -- --check || echo "No format script found, skipping"

      - name: Run backend tests
        run: |
          cd project/server
          npm run test:ci

      - name: Build backend
        run: |
          cd project/server
          npm run build

      - name: Security audit backend
        run: |
          cd project/server
          npm audit --audit-level=moderate

      # --- Docker Build Validation ---
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build frontend Docker image
        run: |
          cd project
          if [ -f "Dockerfile" ]; then
            docker build . --file Dockerfile --tag frontend-image:ci
            echo "Frontend Docker image built successfully"
          else
            echo "No frontend Dockerfile found, skipping"
          fi

      - name: Build backend Docker image
        run: |
          cd project/server
          if [ -f "Dockerfile" ]; then
            docker build . --file Dockerfile --tag backend-image:ci
            echo "Backend Docker image built successfully"
          else
            echo "No backend Dockerfile found, skipping"
          fi

      # --- Upload Test Results ---
      - name: Upload frontend coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./project/coverage/lcov.info
          flags: frontend
          name: frontend-coverage
        continue-on-error: true

      - name: Upload backend coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./project/server/coverage/lcov.info
          flags: backend
          name: backend-coverage
        continue-on-error: true

  # =============================================================================
  # DEPLOYMENT JOBS
  # =============================================================================

  deploy-frontend:
    name: Deploy Frontend to Vercel
    needs: ci-checks
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to Vercel
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          working-directory: ./project
          vercel-args: '--prod'

  deploy-backend:
    name: Deploy Backend to Render
    needs: ci-checks
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to Render
        uses: johnbeynon/render-deploy-action@v1.0.0
        with:
          service-id: ${{ secrets.RENDER_SERVICE_ID }}
          api-key: ${{ secrets.RENDER_API_KEY }}

  # =============================================================================
  # NOTIFICATION JOB
  # =============================================================================

  notify:
    name: Notify Deployment Status
    needs: [ci-checks, deploy-frontend, deploy-backend]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Check deployment status
        id: check-status
        run: |
          if [ "${{ needs.ci-checks.result }}" == "success" ]; then
            echo "status=success" >> $GITHUB_OUTPUT
            echo "message=‚úÖ CI/CD Pipeline completed successfully!" >> $GITHUB_OUTPUT
          else
            echo "status=failure" >> $GITHUB_OUTPUT
            echo "message=‚ùå CI/CD Pipeline failed. Check the logs for details." >> $GITHUB_OUTPUT
          fi

      - name: Comment on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const message = `## ü§ñ CI/CD Pipeline Status
            
            **Status:** ${{ steps.check-status.outputs.status === 'success' ? '‚úÖ Success' : '‚ùå Failed' }}
            
            **Message:** ${{ steps.check-status.outputs.message }}
            
            **Details:**
            - Frontend: ${{ needs.deploy-frontend.result || 'skipped' }}
            - Backend: ${{ needs.deploy-backend.result || 'skipped' }}
            
            **Commit:** \`${{ github.sha }}\`
            **Branch:** \`${{ github.ref_name }}\`
            
            ---
            *This comment was automatically generated by the CI/CD pipeline.*`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: message
            });

      - name: Send Slack notification (optional)
        if: failure() && secrets.SLACK_WEBHOOK_URL
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}
          channel: '#deployments'
          text: |
            ü§ñ AI Chatbot Deployment Status
            
            **Repository:** ${{ github.repository }}
            **Branch:** ${{ github.ref_name }}
            **Commit:** ${{ github.sha }}
            **Status:** ${{ job.status }}
            
            <${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|View Details> 